name: .Net build and publish

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '7.0.x'

      - name: Restore dependencies
        run: dotnet restore Backend/EcommerceBackend.Application/EcommerceBackend.Application.csproj

      - name: Build
        run: dotnet build Backend/EcommerceBackend.Application/EcommerceBackend.Application.csproj --configuration Release

      - name: Publish
        run: dotnet publish Backend/EcommerceBackend.Application/EcommerceBackend.Application.csproj --configuration Release --output ./publish

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ecommerce-api
          path: ./publish

  deploy:
    runs-on: self-hosted   # Windows Server with IIS
    needs: build
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: ecommerce-api
          path: C:\Users\devops-test2\Documents\publish

      - name: Deploy to IIS
        shell: powershell
        run: |
          Import-Module WebAdministration

          $appName   = "ecommerce-api"
          $sitePath  = "C:\inetpub\wwwroot\$appName"
          $port      = 9090

          # --- Ensure IIS Service is running ---
          Start-Service W3SVC

          # --- App Pool setup ---
          if (-not (Test-Path "IIS:\AppPools\$appName")) {
              New-WebAppPool -Name $appName
          }
          Set-ItemProperty "IIS:\AppPools\$appName" -Name managedRuntimeVersion -Value ""
          Set-ItemProperty "IIS:\AppPools\$appName" -Name managedPipelineMode -Value "Integrated"
          Start-WebAppPool -Name $appName

          # --- Site folder setup ---
          if (-not (Test-Path $sitePath)) {
              New-Item -ItemType Directory -Path $sitePath | Out-Null
          }
          Remove-Item "$sitePath\*" -Recurse -Force -ErrorAction SilentlyContinue
          Copy-Item "C:\Users\devops-test2\Documents\publish\*" $sitePath -Recurse

          # --- Website setup ---
          if (-not (Test-Path "IIS:\Sites\$appName")) {
              New-Website -Name $appName -Port $port -PhysicalPath $sitePath -ApplicationPool $appName
          }
          else {
              Set-ItemProperty "IIS:\Sites\$appName" -Name physicalPath -Value $sitePath
              Set-ItemProperty "IIS:\Sites\$appName" -Name applicationPool -Value $appName
          }

          # --- Ensure binding exists ---
          $binding = Get-WebBinding -Name $appName -ErrorAction SilentlyContinue | Where-Object { $_.bindingInformation -eq "*:$port:" }
          if (-not $binding) {
              New-WebBinding -Name $appName -Protocol "http" -Port $port -IPAddress "*"
          }

          # --- Start website safely ---
          Start-Website -Name $appName -ErrorAction SilentlyContinue
